// <auto-generated />
using System;
using Kaizen.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kaizen.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210329195346_NotificationUrl")]
    partial class NotificationUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Kaizen.Domain.Entities.Activity", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Periodicity")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Code");

                    b.HasIndex("ClientId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ActivityEmployee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ActivityCode")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ActivityCode");

                    b.HasIndex("ActivityCode");

                    b.ToTable("ActivitiesEmployees");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ActivityService", b =>
                {
                    b.Property<int>("ActivityCode")
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ActivityCode", "ServiceCode");

                    b.HasIndex("ServiceCode");

                    b.ToTable("ActivitiesServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkOrderCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderCode");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstLandLine")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NIT")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("SecondLandLine")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondPhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TradeName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("NIT")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Street")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ClientAddresses");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.DayStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppliedActivities")
                        .HasColumnType("int");

                    b.Property<int>("ClientsRegistered")
                        .HasColumnType("int");

                    b.Property<int>("ClientsVisited")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MonthStatisticsId")
                        .HasColumnType("int");

                    b.Property<decimal>("Profits")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("MonthStatisticsId");

                    b.ToTable("DayStatistics");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<string>("ContractCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondLastName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UserId")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId");

                    b.HasIndex("ContractCode")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EmployeeCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Charge")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCharges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Charge = "Gerente"
                        },
                        new
                        {
                            Id = 2,
                            Charge = "Coordinador de Calidad y Ambiente"
                        },
                        new
                        {
                            Id = 3,
                            Charge = "Contador"
                        },
                        new
                        {
                            Id = 4,
                            Charge = "Lider SST"
                        },
                        new
                        {
                            Id = 5,
                            Charge = "Auxiliar Administrativa"
                        },
                        new
                        {
                            Id = 6,
                            Charge = "Técnico Operativo"
                        },
                        new
                        {
                            Id = 7,
                            Charge = "Aprendiz"
                        });
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EmployeeContract", b =>
                {
                    b.Property<string>("ContractCode")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ContractCode");

                    b.ToTable("EmployeeContract");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EmployeeService", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("EmployeeId", "ServiceCode");

                    b.HasIndex("ServiceCode");

                    b.ToTable("EmployeesServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Equipment", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Code");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EquipmentService", b =>
                {
                    b.Property<string>("EquipmentCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("EquipmentCode", "ServiceCode");

                    b.HasIndex("ServiceCode");

                    b.ToTable("EquipmentsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.MonthStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppliedActivities")
                        .HasColumnType("int");

                    b.Property<int>("ClientsRegistered")
                        .HasColumnType("int");

                    b.Property<int>("ClientsVisited")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Profits")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("YearStatisticsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YearStatisticsId");

                    b.ToTable("MonthStatistics");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationMonths")
                        .HasColumnType("int");

                    b.Property<string>("DataSheet")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<string>("EmergencyCard")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HealthRegister")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Presentation")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SafetySheet")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ProductInvoices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ProductInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode");

                    b.HasIndex("ProductInvoiceId");

                    b.ToTable("ProductInvoiceDetails");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductService", b =>
                {
                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("ServiceCode", "ProductCode");

                    b.HasIndex("ProductCode");

                    b.ToTable("ProductsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Industrial"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comercial"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Alimentos"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Portuario"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hotelero"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Salud"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Residencial"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Educativo"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Transporte"
                        });
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Service", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("GenerationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ServiceInvoices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceInvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ServiceCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("ServiceInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCode");

                    b.HasIndex("ServiceInvoiceId");

                    b.ToTable("ServiceInvoiceDetails");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Periodicity")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Code");

                    b.HasIndex("ClientId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceRequestService", b =>
                {
                    b.Property<string>("ServiceCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("ServiceRequestCode")
                        .HasColumnType("int");

                    b.HasKey("ServiceCode", "ServiceRequestCode");

                    b.HasIndex("ServiceRequestCode");

                    b.ToTable("ServiceRequestsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Control de plagas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Desinfección de ambientes y superficies"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Captura y reubicación de animales"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Matenimiento de sistemas y equipos"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jardinería"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Suministro, instalación y mantenimiento de equipos"
                        });
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.WorkOrder", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActivityCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClientSignature")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Observations")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validity")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkOrderState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Code");

                    b.HasAlternateKey("ActivityCode");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectorId");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.YearStatistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppliedActivities")
                        .HasColumnType("int");

                    b.Property<int>("ClientsRegistered")
                        .HasColumnType("int");

                    b.Property<int>("ClientsVisited")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Profits")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Year");

                    b.ToTable("YearStatistics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(191)
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3bb4b79d-85a4-4a94-b55e-5619c9acf4a2",
                            ConcurrencyStamp = "1ed77447-fe5c-42c2-9711-3f91cc103255",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e88f6181-e86a-49e1-a2da-c79c71914624",
                            ConcurrencyStamp = "177cda8b-1541-411e-8891-62f58b0e45fa",
                            Name = "OfficeEmployee",
                            NormalizedName = "OFFICEEMPLOYEE"
                        },
                        new
                        {
                            Id = "e6728857-7423-443f-8228-2c8dd22f3aab",
                            ConcurrencyStamp = "501614ae-a5ad-4ee3-ba6f-17c28ab1cd5d",
                            Name = "TechnicalEmployee",
                            NormalizedName = "TECHNICALEMPLOYEE"
                        },
                        new
                        {
                            Id = "a988a9ea-c7a5-4329-aceb-3da5016c6a43",
                            ConcurrencyStamp = "fba45aab-42d7-4e12-9dc0-44a2f68badf1",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(191)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(191)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Activity", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ActivityEmployee", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Activity", "Activity")
                        .WithMany("ActivitiesEmployees")
                        .HasForeignKey("ActivityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeesActivities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ActivityService", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Activity", "Activity")
                        .WithMany("ActivitiesServices")
                        .HasForeignKey("ActivityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Client", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ClientAddress", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithOne("ClientAddress")
                        .HasForeignKey("Kaizen.Domain.Entities.ClientAddress", "ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ContactPerson", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithMany("ContactPeople")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.DayStatistics", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.MonthStatistics", null)
                        .WithMany("DayStatistics")
                        .HasForeignKey("MonthStatisticsId");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.EmployeeCharge", "EmployeeCharge")
                        .WithMany()
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.EmployeeContract", "EmployeeContract")
                        .WithMany()
                        .HasForeignKey("ContractCode");

                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EmployeeCharge");

                    b.Navigation("EmployeeContract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EmployeeService", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeesServices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Service", "Service")
                        .WithMany("EmployeesServices")
                        .HasForeignKey("ServiceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.EquipmentService", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Equipment", "Equipment")
                        .WithMany("EquipmentsServices")
                        .HasForeignKey("EquipmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Service", "Service")
                        .WithMany("EquipmentsServices")
                        .HasForeignKey("ServiceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.MonthStatistics", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.YearStatistics", null)
                        .WithMany("MonthStatistics")
                        .HasForeignKey("YearStatisticsId");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductInvoice", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductInvoiceDetail", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Product", "Detail")
                        .WithMany()
                        .HasForeignKey("ProductCode");

                    b.HasOne("Kaizen.Domain.Entities.ProductInvoice", null)
                        .WithMany("ProductInvoiceDetails")
                        .HasForeignKey("ProductInvoiceId");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductService", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Product", "Product")
                        .WithMany("ProductsServices")
                        .HasForeignKey("ProductCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Service", "Service")
                        .WithMany("ProductsServices")
                        .HasForeignKey("ServiceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Service", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceInvoice", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceInvoiceDetail", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Service", "Detail")
                        .WithMany()
                        .HasForeignKey("ServiceCode");

                    b.HasOne("Kaizen.Domain.Entities.ServiceInvoice", null)
                        .WithMany("ServiceInvoiceDetails")
                        .HasForeignKey("ServiceInvoiceId");

                    b.Navigation("Detail");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceRequest", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceRequestService", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Service", "Service")
                        .WithMany("ServiceRequestsServices")
                        .HasForeignKey("ServiceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceRequestsServices")
                        .HasForeignKey("ServiceRequestCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.WorkOrder", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Kaizen.Domain.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Employee");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kaizen.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Activity", b =>
                {
                    b.Navigation("ActivitiesEmployees");

                    b.Navigation("ActivitiesServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientAddress");

                    b.Navigation("ContactPeople");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeesActivities");

                    b.Navigation("EmployeesServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Equipment", b =>
                {
                    b.Navigation("EquipmentsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.MonthStatistics", b =>
                {
                    b.Navigation("DayStatistics");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ProductInvoice", b =>
                {
                    b.Navigation("ProductInvoiceDetails");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.Service", b =>
                {
                    b.Navigation("EmployeesServices");

                    b.Navigation("EquipmentsServices");

                    b.Navigation("ProductsServices");

                    b.Navigation("ServiceRequestsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceInvoice", b =>
                {
                    b.Navigation("ServiceInvoiceDetails");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.ServiceRequest", b =>
                {
                    b.Navigation("ServiceRequestsServices");
                });

            modelBuilder.Entity("Kaizen.Domain.Entities.YearStatistics", b =>
                {
                    b.Navigation("MonthStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
